#-------------------------------------------------------------------------
# TITLE:
#    markdown.test
#
# PROJECT:
#    tcl-markdown: Your project description
#
# DESCRIPTION:
#    markdown: Test Suite
#-------------------------------------------------------------------------

#-------------------------------------------------------------------------
# Load the tcltest package

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest 2.3
    eval ::tcltest::configure $argv
}

namespace import ::tcltest::test

#-------------------------------------------------------------------------
# Load the package to be tested

source ../../lib/markdown/pkgModules.tcl

#-------------------------------------------------------------------------
# Setup

tcltest::testConstraint knownbug 0


# outdent text
#
# text   - A multi-line text string
#
# This command outdents a multi-line text string to the left margin.

proc outdent {text} {
    # FIRST, remove any leading blank lines
    regsub {\A(\s*\n)} $text "" text

    # NEXT, remove any trailing whitespace
    set text [string trimright $text]

    # NEXT, get the length of the leading on the first line.
    if {[regexp {\A(\s*)\S} $text dummy leader]} {

        # Remove the leader from the beginning of each indented
        # line, and update the string.
        regsub -all -line "^$leader" $text "" text
    }

    return $text
}


proc cmp {s1 s2} {
    set s1 [string trim $s1]
    set s2 [string trim $s2]

    return [expr {$s1 eq $s2}]
}

# convert in
#
# in - markdown input, possibly indented.
#
# Outdents the input and converts it to HTML.  Indents it for inclusion
# in a result.
proc convert {in} {
    set lines [split [string trim [markdown convert [outdent $in]]] \n]

    set out [join $lines "\n    "]
    return "\n    $out\n"
}

#-------------------------------------------------------------------------
# convert

# 1.* - Caius markdown tests

test convert-1.1 {bq test} -body {
    set md   [::tcltest::viewFile bq.md]
    set html [::tcltest::viewFile bq.html]

    cmp $html [markdown convert $md]
} -result {1}

test convert-1.2 {code test} -body {
    set md   [::tcltest::viewFile code.md]
    set html [::tcltest::viewFile code.html]

    cmp $html [markdown convert $md]
} -result {1}

test convert-1.3 {comments test} -body {
    set md   [::tcltest::viewFile comments.md]
    set html [::tcltest::viewFile comments.html]
    cmp $html [markdown convert $md]
} -result {1}

test convert-1.4 {inline test} -body {
    set md   [::tcltest::viewFile inline.md]
    set html [::tcltest::viewFile inline.html]
    cmp $html [markdown convert $md]
} -result {1}

test convert-1.5 {lists test} -body {
    set md   [::tcltest::viewFile lists.md]
    set html [::tcltest::viewFile lists.html]
    cmp $html [markdown convert $md]
} -result {1}

test convert-1.6 {p_br_h_hr test} -body {
    set md   [::tcltest::viewFile p_br_h_hr.md]
    set html [::tcltest::viewFile p_br_h_hr.html]
    cmp $html [markdown convert $md]
} -result {1}

# 2.* - Tcl-Markdown tests

test convert-2.1 {basic text} -body {
    convert {
        A line of text.

        Another line of text.
    }
} -result {
    <p>A line of text.</p>
    
    <p>Another line of text.</p>
}

test convert-2.2 {refs} -body {
    convert {
        Find it [here][foo]!

        [foo]: http://example.com/  "Optional Title Here"
    }
} -result {
    <p>Find it <a href="http://example.com/" title="Optional Title Here">here</a>!</p>
}



#-------------------------------------------------------------------------
# mdtest: Bugs found while running michelf/mdtest


test mdtest-1.1 {AL: Auto links: & not escaped in URL} -body {
    convert {
        Auto-link with ampersand: <http://example.com/?foo=1&bar=2>
    }
} -result {
    <p>Auto-link with ampersand: <a href="http://example.com/?foo=1&amp;bar=2">http://example.com/?foo=1&amp;bar=2</a></p>
}

test mdtest-1.2 {Undefined refs cause syntax error} -body {
    convert {
        Undefined ref: [foo]
    }
} -result {
    <p>Undefined ref: [foo]</p>
}

test mdtest-1.3 {LRS: Embedded brackets in link} -constraints knownbug -body {
    convert {
        With [embedded [brackets]] [b].

        [b]: /url/
    }
} -result {
    <p>With <a href="/url/">embedded [brackets]</a>.</p>
}

test mdtest-1.4 {LRS: Simple reflink} -constraints knownbug -body {
    convert {
        Simple link [this].

        [this]: /url/
    }
} -result {
    <p>Simple link <a href="/url/">this</a>.</p>
}


test mdtest-1.5 {LRS: Reflink embedded in brackets 1} -constraints knownbug -body {
    convert {
        [Links can be [embedded][] in brackets]

        [embedded]: /url/
    }
} -result {
    <p>[Links can be <a href="/url/">embedded</a> in brackets]</p>
}

test mdtest-1.6 {LRS: Reflink embedded in brackets 2} -constraints knownbug -body {
    convert {
        [Links can be [embedded] in brackets]

        [embedded]: /url/
    }
} -result {
    <p>[Links can be <a href="/url/">embedded</a> in brackets]</p>
}

test mdtest-1.7 {LRS: link breaks across lines, 1} -constraints knownbug -body {
    convert {
        The [link
        breaks] across lines.

        [link breaks]: /url/
    }
} -result {
    <p>The <a href="/url/">link
    breaks</a> across lines.</p>
}

test mdtest-1.8 {LRS: link breaks across lines, 2} -constraints knownbug -body {
    convert {
        The [link 
        breaks] across lines, but with a line-ending space.

        [link breaks]: /url/
    }
} -result {
    <p>The <a href="/url/">link 
    breaks</a> across lines, but with a line-ending space.</p>
}

test mdtest-1.9 {OAUL: "* * *" line after unordered list} -constraints knownbug -body {
    # This causes the processor to hang.
    convert {
        * asterisk 1

        * * *
    }
} -result {
    <p>The <a href="/url/">link 
    breaks</a> across lines, but with a line-ending space.</p>
}

#-------------------------------------------------------------------------
# Cleanup

::tcltest::cleanupTests
